// SPDX-License-Identifier: MIT
pragma solidity ^0.8.20;

import "@openzeppelin/contracts/token/ERC721/ERC721.sol";
import "@openzeppelin/contracts/access/Ownable.sol";

/*
 * @dev ERC721 contract representing a music album collection. This contract allows minting a set of NFTs at once,
 * setting up royalties, and granting approval for a vault to manage the NFTs (e.g., for fractionalization).
*/
contract Euphoria is ERC721, Ownable {
    uint256 private _nextTokenId = 1; // Start tokenId indexing at 1

    /**
     * @notice Constructor for the Total Eclipse NFT contract.
     * @param _royaltyReceiverAddress Address that will receive all royalty payments.
     * @param _approvalToVaultAddress Address approved to operate all NFTs (e.g., for fractionalization purposes).
     */
    constructor(
        address _royaltyReceiverAddress,
        address _approvalToVaultAddress
    ) ERC721("Euphoria Album", "EUP") Ownable(msg.sender) {

        // Mint the entire collection to the royalty receiver's address.
        collectiveMinting(_royaltyReceiverAddress, 17);

        // Approve the vault address to manage the collection on behalf of the owner.
        _setApprovalForAll(
            _royaltyReceiverAddress,
            _approvalToVaultAddress,
            true
        );
    }

    /**
     * @dev Overrides the baseURI for the NFT metadata. Each album can have a unique baseURI.
     * @return The base URI for metadata storage.
     */
    function _baseURI() internal pure override returns (string memory) {
        return
            "https://inherent-scarlet-tarsier.myfilebase.com/ipfs/QmNnEzoqXghhZX45Dq2KR7JZ7iRtBjBgvr2XAiudceXiDK/"; //Have to change for every albums
    }

    /**
     * @notice Mints multiple NFTs to a specified address.
     * @param _to Address that will receive the minted NFTs.
     * @param _mintAmount Number of NFTs to mint.
     * @dev This function is called only during contract deployment by the owner.
     */
    function collectiveMinting(address _to, uint256 _mintAmount)
        private
        onlyOwner
    {
        for (uint256 i = 0; i < _mintAmount; i++) {
            uint256 tokenId = _nextTokenId++;
            _safeMint(_to, tokenId);
        }
    }

    // To check the NFT count
    function totalSupply() public view returns (uint256) {
        return _nextTokenId - 1; // Because the first token is indexed at 1
    }

    /**
     * @dev Ensures compatibility with ERC721 interface and potential extensions.
     * @param interfaceId The interface identifier being checked.
     * @return True if the interface is supported, false otherwise.
     */
    function supportsInterface(bytes4 interfaceId)
        public
        view
        override(ERC721)
        returns (bool)
    {
        return super.supportsInterface(interfaceId);
    }
}